name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            executable_name: GooglePhotosDownloader.exe
            artifact_name: GooglePhotosDownloader-windows
          - os: ubuntu-latest  
            executable_name: GooglePhotosDownloader
            artifact_name: GooglePhotosDownloader-linux
          - os: macos-latest
            executable_name: GooglePhotosDownloader
            artifact_name: GooglePhotosDownloader-macos
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install --only-binary=all -r requirements-web.txt
        
    - name: Build executable
      run: |
        python build_exe.py
        
    - name: Verify executable exists
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          ls -la dist/GooglePhotosDownloader.exe
          file dist/GooglePhotosDownloader.exe || echo "File command not available on Windows"
        else
          ls -la dist/GooglePhotosDownloader
          file dist/GooglePhotosDownloader
        fi
        
    - name: Create distribution package
      shell: bash
      run: |
        mkdir -p release-package
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp dist/GooglePhotosDownloader.exe release-package/
        else
          cp dist/GooglePhotosDownloader release-package/
          chmod +x release-package/GooglePhotosDownloader
        fi
        cp README.md OAUTH_GUIDE.md INSTALL_WINDOWS.md release-package/
        
        # Create platform-specific setup instructions
        cat > release-package/SETUP_INSTRUCTIONS.txt << 'EOF'
        # Google Photos Downloader - Portable Version

        ## What's in this folder:

        1. **${{ matrix.executable_name }}** - The main application (no Python installation needed!)
        2. **OAUTH_GUIDE.md** - How to get Google credentials  
        3. **README.md** - General usage instructions
        4. **INSTALL_WINDOWS.md** - Windows-specific setup help

        ## Quick Setup:

        ### Step 1: Get Google Credentials
        1. Go to https://console.cloud.google.com/
        2. Create a new project
        3. Enable "Google Photos Library API"  
        4. Create OAuth2 credentials (Desktop Application type)
        5. Download the JSON file and rename it to "credentials.json"
        6. Put credentials.json in the same folder as this executable

        ### Step 2: Run the Application
        Double-click ${{ matrix.executable_name }} to start

        The app will:
        - Check for credentials.json
        - Install any missing packages automatically
        - Start the web server  
        - Open your browser to http://127.0.0.1:8000

        ## Features:
        - No Python installation required
        - French interface
        - Real-time download progress
        - CLI mode available with --help flag

        ## CLI Usage:
        - ./${{ matrix.executable_name }} --help
        - ./${{ matrix.executable_name }} --last-30-days
        - ./${{ matrix.executable_name }} --list-albums
        EOF
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: release-package/
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
        
    - name: Create release packages
      run: |
        cd artifacts
        
        # Create ZIP packages for each platform
        cd GooglePhotosDownloader-windows
        zip -r ../GooglePhotosDownloader-Windows.zip .
        cd ..
        
        cd GooglePhotosDownloader-linux
        tar -czf ../GooglePhotosDownloader-Linux.tar.gz .
        cd ..
        
        cd GooglePhotosDownloader-macos
        tar -czf ../GooglePhotosDownloader-macOS.tar.gz .
        cd ..
        
        ls -la *.zip *.tar.gz
        
    - name: Get version from tag or generate
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v2.0.0-$(date +'%Y%m%d')-$(echo $GITHUB_SHA | cut -c1-7)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Create Release Notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # Google Photos Downloader ${{ steps.get_version.outputs.version }}

        ## 🚀 Portable Executables - No Python Installation Required!

        This release includes standalone executables for Windows, macOS, and Linux. No Python, pip, or Cargo installation needed!

        ### ✨ Features:
        - **Web Interface**: Modern French interface with real-time progress
        - **CLI Mode**: Command-line interface for automation  
        - **No Dependencies**: Everything bundled in single executable
        - **Cross-Platform**: Works on Windows 10+, macOS 10.14+, Ubuntu 18.04+
        - **Family-Friendly**: Just add credentials.json and double-click to run

        ### 📦 Downloads:
        - **Windows**: GooglePhotosDownloader-Windows.zip (~23MB)
        - **macOS**: GooglePhotosDownloader-macOS.tar.gz (~23MB)  
        - **Linux**: GooglePhotosDownloader-Linux.tar.gz (~23MB)

        ### 🔧 Quick Setup:
        1. Download the package for your platform
        2. Extract the archive
        3. Follow OAUTH_GUIDE.md to get Google credentials
        4. Put credentials.json in the same folder
        5. Double-click the executable

        ### 🌐 Web Interface:
        - Opens automatically at http://127.0.0.1:8000
        - French Canadian interface
        - Real-time download progress
        - Session management and resume capability

        ### ⌨️ CLI Usage:
        ```bash
        # Show help
        ./GooglePhotosDownloader --help

        # Download last 30 days
        ./GooglePhotosDownloader --last-30-days --output "Recent Photos"

        # List albums
        ./GooglePhotosDownloader --list-albums

        # Download specific date range
        ./GooglePhotosDownloader --start-date 2023-01-01 --end-date 2023-12-31
        ```

        ### 🛠️ Technical Details:
        - Built with PyInstaller
        - Includes FastAPI web server
        - WebSocket real-time progress
        - Google Photos API integration
        - Session persistence
        - Chunked downloads with retry logic

        ### 🔒 Security:
        - Read-only Google Photos access
        - Local-only operation (except Google API calls)
        - No data sent to external servers
        - User tokens stored locally

        ---
        **Need help?** Check the included documentation files or create an issue on GitHub.
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Google Photos Downloader ${{ steps.get_version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          artifacts/GooglePhotosDownloader-Windows.zip
          artifacts/GooglePhotosDownloader-Linux.tar.gz
          artifacts/GooglePhotosDownloader-macOS.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-executables:
    name: Test Executables
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: GooglePhotosDownloader-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'ubuntu-latest' && 'linux' || 'macos' }}
        path: test-executable
        
    - name: Test executable help
      shell: bash
      run: |
        cd test-executable
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          timeout 30 ./GooglePhotosDownloader.exe --help || echo "Help command completed"
        else
          chmod +x GooglePhotosDownloader
          timeout 30 ./GooglePhotosDownloader --help || echo "Help command completed" 
        fi
        echo "✅ Executable test passed for ${{ matrix.os }}"